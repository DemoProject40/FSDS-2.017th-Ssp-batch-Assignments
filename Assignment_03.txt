1. Why are functions advantageous to have in your programs?
ANS=>Functions reduce the need for duplicate code. This makes programs shorter, easier to read, and easier to update.

--------------------------------------------------------------------------------------------------------------------------------------------
2.When does the code in a function run: when it's specified or when it&#39;s called?
ANS=>The code in a function executes when the function is called, not when the function is defined.

--------------------------------------------------------------------------------------------------------------------------------------------
3.What statement creates a function?
ANS=>The def statement defines (that is, creates) a function.

--------------------------------------------------------------------------------------------------------------------------------------------
4.What is the difference between a function and a function call?
ANS=>A function consists of the def statement and the code in its def clause. A function call is what moves the program execution into the function, and the function call evaluates to the functionâ€™s return value.

--------------------------------------------------------------------------------------------------------------------------------------------
5.How many global scopes are there in a Python program? How many local scopes?
ANS=>There is one global scope, and a local scope is created whenever a function is called.

--------------------------------------------------------------------------------------------------------------------------------------------
6.What happens to variables in a local scope when the function call returns?
ANS=>When a function returns, the local scope is destroyed, and all the variables in it are forgotten.

--------------------------------------------------------------------------------------------------------------------------------------------
7.What is the concept of a return value? Is it possible to have a return value in an expression?
ANS=>A return value is the value that a function call evaluates to. Like any value, a return value can be used as part of an expression.

--------------------------------------------------------------------------------------------------------------------------------------------
8.If a function does not have a return statement, what is the return value of a call to that function?
ANS=>If there is no return statement for a function, its return value is None.

--------------------------------------------------------------------------------------------------------------------------------------------
9.How do you make a function variable refer to the global variable?
ANS=>A global statement will force a variable in a function to refer to the global variable.

--------------------------------------------------------------------------------------------------------------------------------------------
10.What is the data type of None?
ANS=> noneType

--------------------------------------------------------------------------------------------------------------------------------------------
11.What does the sentence import areallyourpetsnamederic do?
ANS=>That import statement imports a module named areallyourpetsnamederic.

--------------------------------------------------------------------------------------------------------------------------------------------
12.If you had a bacon() feature in a spam module, what would you call it after importing spam?
ANS=>This function could be called with spam.bacon().

--------------------------------------------------------------------------------------------------------------------------------------------
13.What can you do to save a programme from crashing if it encounters an error?
ANS=> Place the line of code that might cause an error in a try clause.

--------------------------------------------------------------------------------------------------------------------------------------------
14.What is the purpose of the try clause? What is the purpose of the except clause?
ANS=>The code that could potentially cause an error goes in the try clause. The code that executes if an error happens goes in the except clause.

--------------------------------------------------------------------------------------------------------------------------------------------

